/**
 * generated by Xtext 2.9.2
 */
package ch.raiffeisen.ipricer.definition.definitionDSL.impl;

import ch.raiffeisen.ipricer.definition.definitionDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DefinitionDSLFactoryImpl extends EFactoryImpl implements DefinitionDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DefinitionDSLFactory init()
  {
    try
    {
      DefinitionDSLFactory theDefinitionDSLFactory = (DefinitionDSLFactory)EPackage.Registry.INSTANCE.getEFactory(DefinitionDSLPackage.eNS_URI);
      if (theDefinitionDSLFactory != null)
      {
        return theDefinitionDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DefinitionDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefinitionDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DefinitionDSLPackage.DEFINITION: return createDefinition();
      case DefinitionDSLPackage.DATA: return createData();
      case DefinitionDSLPackage.INIT_SECTION: return createInitSection();
      case DefinitionDSLPackage.TYPE_MASK_SECTION: return createTypeMaskSection();
      case DefinitionDSLPackage.UNDERLYING_MASK_SECTION: return createUnderlyingMaskSection();
      case DefinitionDSLPackage.UNDERLYING_LIST_SECTION: return createUnderlyingListSection();
      case DefinitionDSLPackage.OPTION_LIST_SECTION: return createOptionListSection();
      case DefinitionDSLPackage.OPTION_MASK_SECTION: return createOptionMaskSection();
      case DefinitionDSLPackage.UNDERLYING_LIST_DEFINTION: return createUnderlyingListDefintion();
      case DefinitionDSLPackage.TYPE_MASK_DEFINITION: return createTypeMaskDefinition();
      case DefinitionDSLPackage.UNDERLYING_MASK_DEFINITION: return createUnderlyingMaskDefinition();
      case DefinitionDSLPackage.INIT_DEFINITION: return createInitDefinition();
      case DefinitionDSLPackage.FIELD_DEFINITION: return createFieldDefinition();
      case DefinitionDSLPackage.OPTION: return createOption();
      case DefinitionDSLPackage.OPTION_VALPROC: return createOptionValproc();
      case DefinitionDSLPackage.OPTION_STRICT: return createOptionStrict();
      case DefinitionDSLPackage.OPTION_RANGE: return createOptionRange();
      case DefinitionDSLPackage.OPTION_CONTRIB: return createOptionContrib();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DefinitionDSLPackage.FIELD_TYPE:
        return createFIELD_TYPEFromString(eDataType, initialValue);
      case DefinitionDSLPackage.ROLE:
        return createROLEFromString(eDataType, initialValue);
      case DefinitionDSLPackage.RECORDCLASS:
        return createRECORDCLASSFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DefinitionDSLPackage.FIELD_TYPE:
        return convertFIELD_TYPEToString(eDataType, instanceValue);
      case DefinitionDSLPackage.ROLE:
        return convertROLEToString(eDataType, instanceValue);
      case DefinitionDSLPackage.RECORDCLASS:
        return convertRECORDCLASSToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Data createData()
  {
    DataImpl data = new DataImpl();
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitSection createInitSection()
  {
    InitSectionImpl initSection = new InitSectionImpl();
    return initSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeMaskSection createTypeMaskSection()
  {
    TypeMaskSectionImpl typeMaskSection = new TypeMaskSectionImpl();
    return typeMaskSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnderlyingMaskSection createUnderlyingMaskSection()
  {
    UnderlyingMaskSectionImpl underlyingMaskSection = new UnderlyingMaskSectionImpl();
    return underlyingMaskSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnderlyingListSection createUnderlyingListSection()
  {
    UnderlyingListSectionImpl underlyingListSection = new UnderlyingListSectionImpl();
    return underlyingListSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionListSection createOptionListSection()
  {
    OptionListSectionImpl optionListSection = new OptionListSectionImpl();
    return optionListSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionMaskSection createOptionMaskSection()
  {
    OptionMaskSectionImpl optionMaskSection = new OptionMaskSectionImpl();
    return optionMaskSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnderlyingListDefintion createUnderlyingListDefintion()
  {
    UnderlyingListDefintionImpl underlyingListDefintion = new UnderlyingListDefintionImpl();
    return underlyingListDefintion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeMaskDefinition createTypeMaskDefinition()
  {
    TypeMaskDefinitionImpl typeMaskDefinition = new TypeMaskDefinitionImpl();
    return typeMaskDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnderlyingMaskDefinition createUnderlyingMaskDefinition()
  {
    UnderlyingMaskDefinitionImpl underlyingMaskDefinition = new UnderlyingMaskDefinitionImpl();
    return underlyingMaskDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitDefinition createInitDefinition()
  {
    InitDefinitionImpl initDefinition = new InitDefinitionImpl();
    return initDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FieldDefinition createFieldDefinition()
  {
    FieldDefinitionImpl fieldDefinition = new FieldDefinitionImpl();
    return fieldDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionValproc createOptionValproc()
  {
    OptionValprocImpl optionValproc = new OptionValprocImpl();
    return optionValproc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionStrict createOptionStrict()
  {
    OptionStrictImpl optionStrict = new OptionStrictImpl();
    return optionStrict;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionRange createOptionRange()
  {
    OptionRangeImpl optionRange = new OptionRangeImpl();
    return optionRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionContrib createOptionContrib()
  {
    OptionContribImpl optionContrib = new OptionContribImpl();
    return optionContrib;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FIELD_TYPE createFIELD_TYPEFromString(EDataType eDataType, String initialValue)
  {
    FIELD_TYPE result = FIELD_TYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFIELD_TYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ROLE createROLEFromString(EDataType eDataType, String initialValue)
  {
    ROLE result = ROLE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertROLEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RECORDCLASS createRECORDCLASSFromString(EDataType eDataType, String initialValue)
  {
    RECORDCLASS result = RECORDCLASS.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRECORDCLASSToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefinitionDSLPackage getDefinitionDSLPackage()
  {
    return (DefinitionDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DefinitionDSLPackage getPackage()
  {
    return DefinitionDSLPackage.eINSTANCE;
  }

} //DefinitionDSLFactoryImpl
