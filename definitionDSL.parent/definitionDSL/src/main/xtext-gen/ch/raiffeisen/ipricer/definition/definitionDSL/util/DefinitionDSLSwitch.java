/**
 * generated by Xtext 2.9.2
 */
package ch.raiffeisen.ipricer.definition.definitionDSL.util;

import ch.raiffeisen.ipricer.definition.definitionDSL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see ch.raiffeisen.ipricer.definition.definitionDSL.DefinitionDSLPackage
 * @generated
 */
public class DefinitionDSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DefinitionDSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefinitionDSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DefinitionDSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DefinitionDSLPackage.DEFINITION:
      {
        Definition definition = (Definition)theEObject;
        T result = caseDefinition(definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.DATA:
      {
        Data data = (Data)theEObject;
        T result = caseData(data);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.INIT_SECTION:
      {
        InitSection initSection = (InitSection)theEObject;
        T result = caseInitSection(initSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.TYPE_MASK_SECTION:
      {
        TypeMaskSection typeMaskSection = (TypeMaskSection)theEObject;
        T result = caseTypeMaskSection(typeMaskSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.UNDERLYING_MASK_SECTION:
      {
        UnderlyingMaskSection underlyingMaskSection = (UnderlyingMaskSection)theEObject;
        T result = caseUnderlyingMaskSection(underlyingMaskSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.UNDERLYING_LIST_SECTION:
      {
        UnderlyingListSection underlyingListSection = (UnderlyingListSection)theEObject;
        T result = caseUnderlyingListSection(underlyingListSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION_LIST_SECTION:
      {
        OptionListSection optionListSection = (OptionListSection)theEObject;
        T result = caseOptionListSection(optionListSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION_MASK_SECTION:
      {
        OptionMaskSection optionMaskSection = (OptionMaskSection)theEObject;
        T result = caseOptionMaskSection(optionMaskSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.UNDERLYING_LIST_DEFINTION:
      {
        UnderlyingListDefintion underlyingListDefintion = (UnderlyingListDefintion)theEObject;
        T result = caseUnderlyingListDefintion(underlyingListDefintion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.TYPE_MASK_DEFINITION:
      {
        TypeMaskDefinition typeMaskDefinition = (TypeMaskDefinition)theEObject;
        T result = caseTypeMaskDefinition(typeMaskDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.UNDERLYING_MASK_DEFINITION:
      {
        UnderlyingMaskDefinition underlyingMaskDefinition = (UnderlyingMaskDefinition)theEObject;
        T result = caseUnderlyingMaskDefinition(underlyingMaskDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.INIT_DEFINITION:
      {
        InitDefinition initDefinition = (InitDefinition)theEObject;
        T result = caseInitDefinition(initDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.FIELD_DEFINITION:
      {
        FieldDefinition fieldDefinition = (FieldDefinition)theEObject;
        T result = caseFieldDefinition(fieldDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION:
      {
        Option option = (Option)theEObject;
        T result = caseOption(option);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION_VALPROC:
      {
        OptionValproc optionValproc = (OptionValproc)theEObject;
        T result = caseOptionValproc(optionValproc);
        if (result == null) result = caseOption(optionValproc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION_STRICT:
      {
        OptionStrict optionStrict = (OptionStrict)theEObject;
        T result = caseOptionStrict(optionStrict);
        if (result == null) result = caseOption(optionStrict);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION_RANGE:
      {
        OptionRange optionRange = (OptionRange)theEObject;
        T result = caseOptionRange(optionRange);
        if (result == null) result = caseOption(optionRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DefinitionDSLPackage.OPTION_CONTRIB:
      {
        OptionContrib optionContrib = (OptionContrib)theEObject;
        T result = caseOptionContrib(optionContrib);
        if (result == null) result = caseOption(optionContrib);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinition(Definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseData(Data object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitSection(InitSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Mask Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Mask Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeMaskSection(TypeMaskSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Underlying Mask Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Underlying Mask Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnderlyingMaskSection(UnderlyingMaskSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Underlying List Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Underlying List Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnderlyingListSection(UnderlyingListSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option List Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option List Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionListSection(OptionListSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option Mask Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option Mask Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionMaskSection(OptionMaskSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Underlying List Defintion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Underlying List Defintion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnderlyingListDefintion(UnderlyingListDefintion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Mask Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Mask Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeMaskDefinition(TypeMaskDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Underlying Mask Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Underlying Mask Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnderlyingMaskDefinition(UnderlyingMaskDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Init Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Init Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitDefinition(InitDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldDefinition(FieldDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOption(Option object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option Valproc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option Valproc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionValproc(OptionValproc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option Strict</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option Strict</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionStrict(OptionStrict object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionRange(OptionRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option Contrib</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option Contrib</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionContrib(OptionContrib object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DefinitionDSLSwitch
